#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'probablyfine'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/probablyfine` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/probablyfine now"
  exit 64
end

include GLI::App

program_desc 'Maintenance application for devopsdays.org hugo website'

version Probablyfine::VERSION

subcommand_option_handling :normal
arguments :strict

# desc 'Describe some switch here'
# switch [:s,:switch]
#
# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

desc 'Used for creating a new sponsor'
long_desc %{
  This is used when you are creating a new sponsor. It will NOT over-write an existing sponsor.
}
arg '<sponsor name>'
arg '<image path>'
# TODO add more flags, maybe for modifying an existing sponsor
command :sponsor do |c|

  c.flag 'path,p', :default_value => Dir.getwd,
                     :arg_name => 'path',
                     :type => String,
                     :desc => 'The root path of your devopsdays-web directory. Example: /home/matt/src/devopsdays-web/. If not specified, assumes the current directory'
  c.default_value 'default'
  c.action do |global_options,options,args|
    # Your command logic here

    # If you have any errors, just raise them
    # raise "that command made no sense"

    puts "sponsor command ran"
  end
end

desc 'Used for migrating an event'
arg_name 'Describe arguments to migrate here'
command :migrate do |c|
  c.action do |global_options,options,args|
    puts "migrate command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
